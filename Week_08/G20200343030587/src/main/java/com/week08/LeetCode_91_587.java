package com.week08;

public class LeetCode_91_587 {
    public int numDecodings(String s) {
        //i 待解码字符:       1        2          2           2               1
        //
        //  分解例子          1      1-2        1-2-2       1-2-2-2       1-2-2-2-1
        //                          12         12-2        12-2-2        12-2-2-1
        //                                     1-22        1-22-2        1-22-2-1
        //                                                 1-2-22        1-2-22-1
        //                                                 12-22         12-22-1
        //                                                               1-2-2-21
        //                                                               12-2-21
        //                                                               1-22-21

        //   独数            1       2           2            2              1
        //   合数            1       12          22           22             21

        //  解码个数          1       2           3            5              8
        //  解码步长 1或2 因为编码时 最大是26一个二位数
        //  i＝3(122)，解码例子数＝[3-1]+独数(2) ＋ [3-2]+合数(22)
        //通过上面分析找到规律 解码数 dp[i] = dp[i-1] + dp[i-2]
        //很像 斐波那契数列
        //上边例子都是正常情况，需要考虑边界值问题 0
        //合数时满足 10 <= s[i-2]s[i-1] <= 26
        //独数时满足 s[i－1]!='0'
        //待解码串s[0]==‘0’ 不合法返回0

        if (s.charAt(0) == '0') return 0;
        int[] dp = new int[s.length() + 1];
        dp[0] = dp[1] = 1;
        for (int i = 2; i <= s.length(); i++) {
            //如果该位不为'0'，说明该位单独成字母合法
            if (s.charAt(i - 1) != '0') {
                dp[i] += dp[i - 1];
            }
            //后两位组合 在10～26中是合法的
            if (s.charAt(i - 2) == '1' || s.charAt(i - 2) == '2' && s.charAt(i - 1) <= '6') {
                dp[i] +=  dp[i - 2];
            }
        }
        return dp[s.length()];
    }
}
